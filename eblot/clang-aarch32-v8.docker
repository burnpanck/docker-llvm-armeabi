FROM clang:v8 as builder
ENV CLANG8PATH=/usr/local/clang8
LABEL description="Build a LLVM/Clang 8 toolchain for AARM Aarch32 targets"
LABEL maintainer="Emmanuel Blot <emmanuel.blot@free.fr>"
RUN apk update
RUN apk add build-base ninja cmake git patch vim python2 curl file
WORKDIR /toolchain/build/llvm
RUN cmake -G Ninja /toolchain/llvm -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=${CLANG8PATH} -DLLVM_ENABLE_SPHINX=False -DLLVM_INCLUDE_TESTS=False -DLLVM_TARGETS_TO_BUILD="ARM"
RUN ninja
RUN cmake --build . --target install
ENV PATH=${PATH}:${CLANG8PATH}/bin
RUN file /usr/local/clang8/bin/* | grep ELF | cut -d: -f1 | xargs strip
RUN rm /usr/local/clang8/lib/*.a
WORKDIR /

FROM alpine:v3.9.2
LABEL description="Aarch32 toolchain"
LABEL maintainer="Emmanuel Blot <emmanuel.blot@free.fr>"
COPY --from=builder /usr/local/clang8 /usr/local/clang8
ENV PATH=$PATH:/usr/local/clang8/bin
WORKDIR /

# there should be at least 2GB/RAM per vcore
# docker build -f host/docker/src/clang-aarch32-v8.docker -t clang-aarch32:v8 .
# docker tag clang-aarch32:v8 ${DOCKERHUB_USER}/clang-aarch32:v8
# docker push ${DOCKERHUB_USER}/clang-aarch32:v8
